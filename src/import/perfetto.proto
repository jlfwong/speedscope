// THIS FILE DEFINES THE CORE PERFETTO TRACE FORMAT
//
// Based on the Perfetto tracing system protobuf definitions
// Original from: https://github.com/google/perfetto/tree/main/protos/perfetto/trace
//
// This file is licensed under the Apache License 2.0

syntax = "proto2";

package perfetto.protos;

// Represents the root trace object containing a sequence of trace packets
message Trace {
  repeated TracePacket packet = 1;
}

// The root object of a Perfetto trace.
// Represents a single packet within a trace file
message TracePacket {
  optional uint64 timestamp = 8;
  optional uint32 timestamp_clock_id = 58;
  
  // The trusted user ID of the producer
  optional int32 trusted_uid = 3;
  
  // Unique packet sequence identifier  
  optional uint32 trusted_packet_sequence_id = 10;
  
  // Sequence-specific state management
  optional uint32 sequence_flags = 13;
  optional bool previous_packet_dropped = 42;
  optional bool first_packet_on_sequence = 87;
  
  // Packet data - oneof field with main trace data types
  oneof data {
    // CPU profiling data
    PerfSample perf_sample = 66;
    
    // Process and thread information  
    ProcessTree process_tree = 2;
    
    // Track events (similar to Chrome trace events)
    TrackEvent track_event = 11;
    
    // Chrome events compatibility
    ChromeEvents chrome_events = 49;
    
    // Clock synchronization
    ClockSnapshot clock_snapshot = 6;
    
    // CPU scheduling info
    FtraceEvents ftrace_events = 1;
  }
  
  // Incrementally emitted interned data valid for this packet sequence
  optional InternedData interned_data = 12;
  
  // Default values for future packets in this sequence
  optional TracePacketDefaults trace_packet_defaults = 59;
}

// CPU profiling sample data
message PerfSample {
  optional uint32 cpu = 1;
  optional uint32 pid = 2;
  optional uint32 tid = 3;
  repeated uint64 callstack_iid = 4;
  optional uint64 timestamp = 5;
}

// Process and thread tree information
message ProcessTree {
  repeated Process processes = 1;
  repeated Thread threads = 2;
}

message Process {
  optional int32 pid = 1;
  optional int32 ppid = 2;
  repeated string cmdline = 3;
}

message Thread {
  optional int32 tid = 1;
  optional int32 tgid = 2;
  optional string name = 3;
}

// Track event data (main profiling/tracing events)
message TrackEvent {
  optional uint64 track_uuid = 11;
  repeated uint64 category_iids = 3;
  optional uint64 name_iid = 10;
  optional Type type = 9;
  
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_SLICE_BEGIN = 1;
    TYPE_SLICE_END = 2;
    TYPE_INSTANT = 3;
    TYPE_COUNTER = 4;
  }
  
  // Duration for slice events
  optional int64 track_event_duration_us = 20;
}

// Chrome events for compatibility
message ChromeEvents {
  repeated ChromeEvent events = 1;
}

message ChromeEvent {
  optional string name = 1;
  optional string category = 2;
  optional string phase = 3;
  optional uint64 timestamp = 4;
  optional uint64 duration = 5;
  optional uint32 pid = 6;
  optional uint32 tid = 7;
}

// Clock synchronization information
message ClockSnapshot {
  repeated Clock clocks = 1;
}

message Clock {
  optional uint32 clock_id = 1;
  optional uint64 timestamp = 2;
}

// Kernel ftrace events
message FtraceEvents {
  optional uint32 cpu = 1;
  repeated FtraceEvent event = 2;
}

message FtraceEvent {
  optional uint64 timestamp = 1;
  optional uint32 pid = 2;
  
  oneof event {
    SchedSwitchFtraceEvent sched_switch = 3;
    CpuIdleFtraceEvent cpu_idle = 4;
  }
}

message SchedSwitchFtraceEvent {
  optional string prev_comm = 1;
  optional int32 prev_pid = 2;
  optional int32 prev_prio = 3;
  optional int64 prev_state = 4;
  optional string next_comm = 5;
  optional int32 next_pid = 6;
  optional int32 next_prio = 7;
}

message CpuIdleFtraceEvent {
  optional uint32 state = 1;
  optional uint32 cpu_id = 2;
}

// Interned data for string/identifier management
message InternedData {
  repeated InternedString event_names = 2;
  repeated InternedString event_categories = 1;
  repeated Callstack callstacks = 17;
  repeated Frame frames = 16;
  repeated FunctionName function_names = 5;
  repeated MappingPath mapping_paths = 7;
}

message InternedString {
  optional uint64 iid = 1;
  optional bytes str = 2;
}

message Callstack {
  optional uint64 iid = 1;
  repeated uint64 frame_ids = 2;
}

message Frame {
  optional uint64 iid = 1;
  optional uint64 function_name_id = 2;
  optional uint64 mapping_id = 3;
  optional uint64 rel_pc = 4;
}

message FunctionName {
  optional uint64 iid = 1;
  optional bytes str = 2;
}

message MappingPath {
  optional uint64 iid = 1;
  optional bytes str = 2;
}

// Default values for trace packets
message TracePacketDefaults {
  optional uint64 timestamp_clock_id = 58;
}